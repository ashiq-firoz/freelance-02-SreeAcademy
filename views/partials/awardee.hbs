<style>
     .scrollable-container {
      height: 80vh; /* 80% of the viewport height */
      overflow-y: auto; /* Enable vertical scrollbar if content exceeds container height */
      /*border: 1px solid #ccc; /* Optional: Add a border for visual clarity */
      padding: 10px; /* Optional: Add padding for content inside the container */
    }
    .btn-color {
        background: linear-gradient(0deg, #252C58, #252C58),
              ;
    }

</style>

<div class="alert alert-warning" role="alert" id="sendalert" hidden="true">
                    Adding Category..
</div>

<div class="alert alert-danger" role="alert" id="erralert" hidden="true">
                    Error..
</div>

<div class="alert alert-success" role="alert" id="successalert" hidden="true">
                    Category Added..
</div>

<div class="alert alert-success" role="alert" id="catalert" hidden="true">
                                        Category Updated..
</div>

<div id="sendalertDelete" hidden>Sending request...</div>
<div id="successalertDelete" hidden>Category deleted successfully!</div>
<div id="erroralertDelete" hidden>Error deleting category. Please try again.</div>

<nav class="navbar navbar-light justify-content-between">
    <div class="container-fluid d-flex justify-content-center">
        <select class="form-control" style="width: 300px;">
            <option value="none">Choose Event</option>
{{#each event}}
{{#each this}}
{{#if this.name}}
  <option value="{{this.name}}">{{this.name}}</option>
  {{/if}}
  {{/each}}
  {{/each}}
</select> 
         &nbsp; &nbsp; &nbsp; 
        <input class="form-control me-2" type="search" placeholder="Search" aria-label="Search" name="search" onchange="Search()" id="search" autofocus style="width: 150px;">
        &nbsp;<button class="btn btn-dark"><i class="bi-search"></i></button> 
       
        {{!-- &nbsp;<button class="btn btn-outline-success">Search</button> --}}
        &nbsp; &nbsp; &nbsp; 
        <a href="/addevent" class="btn btn-dark" style="color:white">
            <i class="fs-4 bi-plus-lg"></i><span class="ms-1 d-none d-sm-inline">&nbsp;Add new </span>
        </a>
    </div>
</nav>


<!--
sample elements to clone

add td element
-->
<input type="text"  name="clonein" style="display: none;" value="">

<!--data storing dummy elements--> 
{{#each data}}
{{#each this}}
{{#if this.name}}
<input type="text"  id="id{{this.name}}" name="id" style="display: none;" value="{{this._id}}">
<input type="text"  id="category{{this.name}}" name="category" style="display: none;" value="{{this.name}}">
<input type="text"  id="regional{{this.name}}" name="regional" style="display: none;" value="{{this.regional_name}}">
<input type="text"  id="active{{this.name}}" name="active" style="display: none;" value="{{this.status}}">
{{/if}}
{{/each}}
{{/each}}

<!--dummy elements over-->

<div class="container scrollable-container">
    <div class="table-responsive-sm">
        <center>
    <table class="table  table-light table-hover" style="width: 90%;">
        <thead>
            <tr>
                <th scope="col">Date</th>
                <th scope="col">Venue</th>
                <th scope="col">Awardee</th>
                <th scope="col">Award Name</th>

            </tr>
        </thead>
        <tbody id="mainbody">
            {{#each data}}
            
            
            {{#each this}}
            {{#if this.name}}
            <tr id="{{this.name}}">
                
                <input type="text"  name="id" style="display: none;" value="{{this._id}}">
                <td>
                    {{this.date}}
                </td>
                <td>
                    <input type="text" id="{{@../index}}" name="adminNo" style="display: none;" value="{{this.adminNo}}">
                    {{this.adminNo}}
                </td>
                <td>
                    <input type="text"  name="name" style="display: none;" value="{{this.name}}">
                    {{this.name}}
                </td>
                <td>
                     {{this.stuname}}
                </td>
                <td>
                    {{this.awardName}}
                </td>
            {{/if}}
            {{/each}}
            </tr>
        
           
            {{/each}}
        </tbody>
    </table>
    </center>
    </div>
</div>

<hr>

<!-- Include this script in your HTML file -->
<script>
    
        // Function to handle form submission
        function submitForm() {
            // Get form element
            const form = document.getElementById('addform');
            
            document.getElementById("sendalert").hidden = false;
            console.log("submit")

           // console.log(form);

            // Check if required fields are filled
            if (form.checkValidity()) {
                // If all required fields are filled, proceed with form submission
                var formData = new FormData(form);
                
                // You can add additional logic here, such as AJAX submission
                // Example using fetch API:
                fetch('/vendor/add-category', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                     if (!response.ok) {
                         throw new Error('Network response was not ok');
                    }
        
                     return response.json();
                    // Handle the response, e.g., show success message or handle errors
                    
                }).then(data => {
                    console.log(data);
                    document.getElementById("sendalert").hidden = true;
                    document.getElementById("successalert").hidden = false;
                    setTimeout(function () {
                    document.getElementById("successalert").hidden = true;
                    }, 1000);
                    // Handle the successful response
       
        
                setTimeout(function () {
                    location.reload();
                }, 1000);
                }).catch(error => {
                    console.error('Error:', error);
                });
            } else {
                // If required fields are not filled, prevent form submission and show an alert or error message
                alert('Please fill in all required fields.');
            }
        }
        
   

</script>



<script>
    names = []
    const relation = new Map();
    datamap = []
{{#each data}}
{{#each this}}
{{#if this.name}}
names.push(document.getElementById({{@../index}}).value);
c = document.getElementById({{@../index}}).value;
d = {
    name : document.getElementById("category"+c).value,
    regional : document.getElementById("regional"+c).value,
    status : document.getElementById("active"+c).value,
}
datamap.push(d);
//there is an error that this.name can't be assigned directly to names array so the above code is a fix to this, 
//follow the method for storing data
{{/if}}
{{/each}}
{{/each}}
//console.log(names);


function Search()
{
    pattern = document.getElementById("search").value;
    pattern = pattern.toLowerCase();
    console.log(pattern)
    if(pattern==""){
         for(i=0;i<names.length;i++)
        {
            document.getElementById(names[i]).hidden = false;
        }
    }
    else{
    for(i=0;i<names.length;i++)
    {
        text  = names[i].toLowerCase();
        console.log(text.includes(pattern));
        if(text.includes(pattern)==false)
        {
            console.log(names[i])
            document.getElementById(names[i]).hidden = true;
        }
        else{
            document.getElementById(names[i]).hidden = false;
        }
    }
    }
}

</script>