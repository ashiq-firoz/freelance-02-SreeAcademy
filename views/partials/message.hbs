<style>
     .scrollable-container {
      height: 80vh; /* 80% of the viewport height */
      overflow-y: auto; /* Enable vertical scrollbar if content exceeds container height */
      /*border: 1px solid #ccc; /* Optional: Add a border for visual clarity */
      padding: 10px; /* Optional: Add padding for content inside the container */
    }
    .btn-color {
        background: linear-gradient(0deg, #252C58, #252C58),
              ;
    }

</style>

 <script src="https://cdn.rawgit.com/davidshimjs/qrcodejs/gh-pages/qrcode.min.js"></script>



 {{#each guard}}
 {{#each this}}
 <input type="text" id="whats{{this.student}}" hidden value="{{this.email}}">
 
 {{/each}}
 {{/each}}



<div class="alert alert-warning" role="alert" id="sendalert" hidden="true">
                    Adding Category..
</div>

<div class="alert alert-danger" role="alert" id="erralert" hidden="true">
                    Error..
</div>

<div class="alert alert-success" role="alert" id="successalert" hidden="true">
                    Category Added..
</div>

<div class="alert alert-success" role="alert" id="catalert" hidden="true">
                                        Category Updated..
</div>

<div id="sendalertDelete" hidden>Sending request...</div>
<div id="successalertDelete" hidden>Category deleted successfully!</div>
<div id="erroralertDelete" hidden>Error deleting category. Please try again.</div>

<nav class="navbar navbar-light justify-content-between">
    <div class="container-fluid d-flex justify-content-center">
        <select class="form-control" style="width: 150px;" id="listSelector" onchange="redirect()">
  <option value="">Select An Option</option>
  <option value="all">All</option>
  <option value="watch">Watch List</option>
  <option value="star">Starred List</option>
  <option value="low">Students low on Attendance</option>
  <option value="due">Students With due</option>
</select> 
         &nbsp; &nbsp; &nbsp; 
        <input class="form-control me-2" type="search" id="searchSelectBox" placeholder="Search" aria-label="Search" name="search" onchange="Search()" id="search" autofocus style="width: 150px;">
        &nbsp;<button class="btn btn-dark"><i class="bi-search"></i></button> 
       
    </div>
</nav>


<script>

     window.onload = function() {
      // Your function code goes here
      var c = {{{choice}}}
      if(c!=null){
        document.getElementById("listSelector").value  = c;
      }
      
      
    };
</script>

<script>

    function redirect() {
      var selectElement = document.getElementById("listSelector");
      var selectedValue = selectElement.value;

      if (selectedValue == "watch") {
        // Redirect to the watch link
        window.location.href = "/getWatchlists";

      } else if (selectedValue == "star") {
        // Redirect to the star link
        window.location.href = "/getStarreds";
      }
      else if(selectedValue == "low"){
        window.location.href = "/getLowattendances";
      }
      else  if(selectedValue == "due"){
        window.location.href = "/getListwithdue";
      }
      else if(selectedValue == "all"){
        window.location.href = "/message";
      }
    }
  </script>





<!--dummy elements over-->

<div class="container scrollable-container" style="height: min-content;">
    <div class="table-responsive-sm">
        <center>
    <table class="table  table-light table-hover" style="width: 90%;">
        <thead>
            <tr>
                <th scope="col">Admission No</th>
                <th scope="col">Name</th>
                <th scope="col">Option</th>
            </tr>
        </thead>
        <tbody id="mainbody">
            {{#each data}}
            
            
            {{#each this}}
            {{#if this.name}}
            <tr id="{{this.name}}">
                
                <input type="text"  name="id" style="display: none;" value="{{this._id}}">
                <td>
                    <input type="text" id="{{@../index}}" name="adminNo" style="display: none;" value="{{this.adminNo}}">
                    {{this.adminNo}}
                </td>
                <td>
                    <input type="text"  name="name" style="display: none;" value="{{this.name}}">
                    {{this.name}}
                </td>
                <td>
                    <button type="button" class="btn btn-dark" id="{{this.adminNo}}" onclick="add(this.id)">
                       Select
                    </button>
                </td>
            {{/if}}
            {{/each}}
            </tr>
        
           
            {{/each}}
        </tbody>
    </table>
    </center>
    </div>
</div>

<script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
<script>
    $(document).ready(function () {
        // Function to filter fourth table rows based on search box input
        $('#searchSelectBox').on('input', function () {
            var searchText = $(this).val().toLowerCase();

            $('#mainbody tr').each(function () {
                var nameText = $(this).find('td:eq(1)').text().toLowerCase();

                if (nameText.includes(searchText)) {
                    $(this).show();
                } else {
                    $(this).hide();
                }
            });
        });
    });
</script>



<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
                <div class="form-group text-center">
                    <button class="btn btn-primary" data-toggle="modal" data-target="#deleteItemModal" >Send message</button>
                </div>
                {{!-- <div class="form-group text-center">
                    <button class="btn btn-primary" data-toggle="modal" data-target="#qrCodeModal" onclick="fetchDataAndDisplayQRCode()">Connect to Whatsapp</button>
                </div> --}}
        </div>
    </div>
</div>

<script>
    function addHiddenInput(customValue) {
        // Create a new input element
        var inputElement = document.createElement("input");

        customValue = document.getElementById("id"+customValue).value;

        // Set the type and name of the input
        inputElement.type = "hidden";
        inputElement.name = "no";

        // Set the value of the input to the custom value passed in the function
        inputElement.value = customValue;

        // Append the input element to the form
        document.getElementById("add-form").appendChild(inputElement);
    }
</script>
    
<hr>



<script>
    function del(id)
    {
        id = id.slice(0,id.length-3);
        console.log(id);
        document.getElementById("delname").value=id;
    }
    function update(id)
    {
        id = id.slice(0,id.length-5);
       
        document.getElementById("catu").value = document.getElementById("category"+id).value;
        document.getElementById("idu").value = document.getElementById("id"+id).value;
        //document.getElementById("regionalu").value = document.getElementById("regional"+id).value;
        if(document.getElementById("active"+id).value=="true") 
        {
            document.getElementById("activeu").value = "check";
            document.getElementById("activeu").checked = true;
        }
        else
        {
            document.getElementById("activeu").value = "check";
            document.getElementById("activeu").checked = false;
        }
    }
</script>



<!-- Modal -->
<div class="modal fade" id="deleteItemModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Selected Items</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <table class="table">
                    <thead>
                        <tr>
                            <th>Admission No</th>
                            <th>Name</th>
                        </tr>
                    </thead>
                    <tbody id="selectedItemsTableBody">
                        <!-- Selected items will be added here dynamically -->
                    </tbody>
                </table>
                <textarea id="messageTextarea" class="form-control" placeholder="Enter your message"></textarea>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="submitData()">Submit</button>
            </div>
        </div>
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="qrCodeModal" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">QR Code</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div id="qrcode"></div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<script>
    // Function to fetch QR code data and display it in the modal
    async function fetchDataAndDisplayQRCode() {
        let qrCodeData ;
        try {

            await fetch('/initQrcode', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            adminNo: "1",
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Handle the server response as needed
        console.log('Server response:', data);
        qrCodeData  = data.data;
        // Optionally, close the modal after successful submission
    })
    .catch(error => {
        console.error('Error:', error);
        // Handle errors as needed
    });
          

            // Display QR code in the modal
            new QRCode(document.getElementById("qrcode"), qrCodeData);
            
            alert("qrdone")
            alert(qrCodeData);
            // Show the modal
            $("#qrCodeModal").modal("show");
        } catch (error) {
            alert(error);
            console.error('Error fetching QR code data:', error);
        }
    }

    // Run the function when the page is fully loaded
</script>

<script>
    function add(id) {
    // Get the data from the selected row
    var adminNo = $("#" + id).closest("tr").find("td:eq(0)").text();
    var name = $("#" + id).closest("tr").find("td:eq(1)").text();

    // Check if the item is already added
    var existingItem = $("#selectedItemsTableBody").find("td:contains('" + adminNo + "')").closest("tr");
    
    if (existingItem.length) {
        // Item is already added, remove it
        existingItem.remove();
        document.getElementById(id).className = "btn btn-dark";
    } else {
        // Item is not added, add it
        $("#selectedItemsTableBody").append("<tr><td>" + adminNo + "</td><td>" + name + "</td></tr>");
        document.getElementById(id).className = "btn btn-success";
    }
    
    

}

function submitData() {
    // Get admin numbers and message
    //alert("send")
    
   var adminNos = [];
    $("#selectedItemsTableBody td").each(function () {
        var adminNo = $(this).text();
        //alert(adminNo)
        adminNos.push(adminNo);
    });
    
    var nos = []

    //alert(adminNos)

    for(i=0;i<adminNos.length;i++){
        if(i%2==0){
            //alert(Number(adminNos[i]))
            //alert(document.getElementById("whats"+Number(adminNos[i])).value)
            nos.push(document.getElementById("whats"+Number(adminNos[i])).value);
        }
    }
    //alert(nos)

    var message = $("#messageTextarea").val();

    if(message == ""){
        alert("Enter a message");
        return;
    }

    var emailIds = nos;

        // Generate the mailto link with email addresses
        var mailtoLink = 'mailto:' + emailIds.join(',') + '?subject=Reminder%20Message&body='+message;

        // Open the default email client
        window.location.href = mailtoLink;
    
    /*
    // Use the fetch method to send data to the server (replace with your server endpoint)
    fetch('/sendmessages', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            adminNo: nos,
            message: message,
        }),
    })
    .then(response => response.json())
    .then(data => {
        // Handle the server response as needed
        console.log('Server response:', data);
        // Optionally, close the modal after successful submission
        $("#deleteItemModal").modal("hide");
    })
    .catch(error => {
        console.error('Error:', error);
        // Handle errors as needed
    });

    */

    window.location.reload();
}

</script>


<!-- Include this script in your HTML file -->
<script>
    
        // Function to handle form submission
        function submitForm() {
            // Get form element
            const form = document.getElementById('addform');
            
            document.getElementById("sendalert").hidden = false;
            console.log("submit")

           // console.log(form);

            // Check if required fields are filled
            if (form.checkValidity()) {
                // If all required fields are filled, proceed with form submission
                var formData = new FormData(form);
                
                // You can add additional logic here, such as AJAX submission
                // Example using fetch API:
                fetch('/vendor/add-category', {
                    method: 'POST',
                    body: formData
                })
                .then(response => {
                     if (!response.ok) {
                         throw new Error('Network response was not ok');
                    }
        
                     return response.json();
                    // Handle the response, e.g., show success message or handle errors
                    
                }).then(data => {
                    console.log(data);
                    document.getElementById("sendalert").hidden = true;
                    document.getElementById("successalert").hidden = false;
                    setTimeout(function () {
                    document.getElementById("successalert").hidden = true;
                    }, 1000);
                    // Handle the successful response
       
        
                setTimeout(function () {
                    location.reload();
                }, 1000);
                }).catch(error => {
                    console.error('Error:', error);
                });
            } else {
                // If required fields are not filled, prevent form submission and show an alert or error message
                alert('Please fill in all required fields.');
            }
        }
        
   

</script>



<script>
    names = []
    const relation = new Map();
    datamap = []
{{#each data}}
{{#each this}}
{{#if this.name}}
names.push(document.getElementById({{@../index}}).value);
c = document.getElementById({{@../index}}).value;
d = {
    name : document.getElementById("category"+c).value,
    regional : document.getElementById("regional"+c).value,
    status : document.getElementById("active"+c).value,
}
datamap.push(d);
//there is an error that this.name can't be assigned directly to names array so the above code is a fix to this, 
//follow the method for storing data
{{/if}}
{{/each}}
{{/each}}
//console.log(names);


function Search()
{
    pattern = document.getElementById("search").value;
    pattern = pattern.toLowerCase();
    console.log(pattern)
    if(pattern==""){
         for(i=0;i<names.length;i++)
        {
            document.getElementById(names[i]).hidden = false;
        }
    }
    else{
    for(i=0;i<names.length;i++)
    {
        text  = names[i].toLowerCase();
        console.log(text.includes(pattern));
        if(text.includes(pattern)==false)
        {
            console.log(names[i])
            document.getElementById(names[i]).hidden = true;
        }
        else{
            document.getElementById(names[i]).hidden = false;
        }
    }
    }
}

</script>


<script>
    function composeEmail() {
        // Set the email addresses
        var emailIds = ['email1@example.com', 'email2@example.com', 'email3@example.com'];

        // Generate the mailto link with email addresses
        var mailtoLink = 'mailto:' + emailIds.join(',') + '?subject=Your%20Subject&body=Your%20Message%20Here';

        // Open the default email client
        window.location.href = mailtoLink;
    }
</script>
